name: >-
  ecs-dev_env_44257f9f-e992-4288-b3e1-fd565c0de396_app_571b8be0-e543-414d-ad7d-4a09d668d4ea
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - master
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_7a24b5c1-8a5b-409b-9995-0faf367ed790
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.AWSECSPIPELINE_ENV_44257F9FE9924288B3E1FD565C0DE396_APP_571B8BE0E543414DAD7D4A09D668D4EA_ECSDEV_ENV_44257F9FE9924288B3E1FD565C0DE396_APP_571B8BE0E543414DAD7D4A09D668D4EA}}
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  IMAGE_NAME: >-
    272133924862.dkr.ecr.us-east-1.amazonaws.com/pipeline-service-ecs-deployment-role
  DOCKER_FILE_PATH: ./Dockerfile
  DOCKER_BUILD_CONTEXT: .
  REPOSITORY_NAME: pipeline-service-ecs-deployment-role
  DEPLOYMENT_CONTAINER_NAME: test
  ECS_CLUSTER: pipeline-service-ecs-cluster
  ECS_SERVICE: pipeline-service
  DEPLOY_STEP_SHOULD_DEPLOY: 'false'
jobs:
  build-and-push:
    name: Build And Push
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets 19d6fc0d-e133-4e3d-88db-ea360508e786'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials ba471edd-a2f6-4cd9-a5b4-ee67b5fa4c96'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Login to Amazon ECR'
        id: skyu-login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: 'Run :: Check if image already exists'
        id: check-image-existence-step-id
        run: |2-

              if docker pull ${{ env.IMAGE_NAME }}:${{env.IMAGE_TAG}} >/dev/null 2>&1; 
              then
                echo "Image exists in registry."
                echo "STEPS_CAN_PROCEED=false" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Build With Docker'
        run: >-
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f
          ${{env.DOCKER_FILE_PATH}} ${{env.DOCKER_BUILD_CONTEXT}}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Create Repository'
        run: >-
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          || true
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Build, tag, and push image'
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Fetch Task Definition'
        id: fetch-task-def
        run: >-
          task_definition_json=$(aws ecs describe-task-definition
          --task-definition ${{ env.TASK_DEFINITION_ARN }} --query
          'taskDefinition' --output json)
                # Save the JSON details to a file
                echo "$task_definition_json" > task-definition.json
                
                # Remove specific fields using jq
                echo "$task_definition_json" | jq 'del(
                  .taskDefinitionArn,
                  .requiresAttributes,
                  .compatibilities,
                  .revision,
                  .status,
                  .registeredAt,
                  .registeredBy
                )' > task-definition.json
      - name: 'Run :: Fill in the new image ID in the Amazon ECS task definition'
        id: task-def
        uses: >-
          aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: task-definition.json
          container-name: ${{ env.DEPLOYMENT_CONTAINER_NAME }}
          image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: 'Run :: Deploy Amazon ECS task definition'
        uses: >-
          aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets 3214be70-1781-4056-abac-22c6d9538c42'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=ECS&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
            
