name: >-
  ecs-dev_env_44257f9f-e992-4288-b3e1-fd565c0de396_app_571b8be0-e543-414d-ad7d-4a09d668d4ea
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - master
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_04580a7f-f4cc-49f8-beb9-d31502c33ebd
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.AWSECSPIPELINE_ENV_44257F9FE9924288B3E1FD565C0DE396_APP_571B8BE0E543414DAD7D4A09D668D4EA_ECSDEV_ENV_44257F9FE9924288B3E1FD565C0DE396_APP_571B8BE0E543414DAD7D4A09D668D4EA}}
  DEPLOY_STEP_SHOULD_DEPLOY: 'false'
jobs:
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets 4241c4f0-baa4-4c68-b0ce-7daba79f4f33'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=ECS&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
            
